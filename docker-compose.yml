version: '3.8'

services:
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    container_name: library-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3000
      - DATABASE_PATH=/app/data/data.db
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=${FRONTEND_URL:-http://localhost:3001}
    volumes:
      - backend_data:/app/data
    networks:
      - library-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - database-init

  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
    container_name: library-frontend
    restart: unless-stopped
    environment:
      - BACKEND_URL=http://backend:3000
      - FRONTEND_HOST=${FRONTEND_HOST:-localhost}
    ports:
      - "${FRONTEND_PORT:-3001}:80"
    networks:
      - library-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      backend:
        condition: service_healthy

  database-init:
    image: alpine:latest
    container_name: library-db-init
    volumes:
      - backend_data:/data
    command: >
      sh -c "
        if [ ! -f /data/data.db ]; then
          echo 'Initializing database directory...';
          touch /data/data.db;
          chmod 664 /data/data.db;
          echo 'Database file created successfully';
        else
          echo 'Database already exists';
        fi
      "
    networks:
      - library-network

  nginx:
    image: nginx:alpine
    container_name: library-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    environment:
      - FRONTEND_URL=http://frontend:80
      - BACKEND_URL=http://backend:3000
    networks:
      - library-network
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy

volumes:
  backend_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}
  nginx_logs:
    driver: local

networks:
  library-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16